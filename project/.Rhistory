Erroresult<- tryCatch({
for(j in 1:nrow(searchList)){
if(movie==searchList[j,1]){
id=searchList[j,3]
break
}
}
movieInfo=find_by_id(id)
rating[i]=movieInfo$imdbRating
next
}, warning = function(war) {
print(paste("MY_WARNING:  ", movie))
}, error = function(err) {
print(paste("MY_ERROR:  ", movie))
}, finally = {
print(paste("End Try&Catch", movie))
})
}
movieList=data.frame(movieTitle, movieUrl, rating)
movieList
movie="Haunted Campus"
id=0
searchList=search_by_title(movie)
for(i in 1:nrow(searchList)){
if(movie==searchList[i,1]){
id=searchList[i,3]
break
}
}
movieInfo=find_by_id(id)
rating=movieInfo$imdbRating
rating
rating
rating=vector(length=length(movieTitle))
for(i in 1:length(movieTitle)){
movie=movieUrl[i]
id=0
searchList=search_by_title(movie)
Erroresult<- tryCatch({
for(j in 1:nrow(searchList)){
if(movie==searchList[j,1]){
id=searchList[j,3]
break
}
}
movieInfo=find_by_id(id)
rating[i]=movieInfo$imdbRating
next
}, warning = function(war) {
print(paste("MY_WARNING:  ", movie))
}, error = function(err) {
print(paste("MY_ERROR:  ", movie))
}, finally = {
print(paste("End Try&Catch", movie))
})
}
movieList=data.frame(movieTitle, movieUrl, rating)
movieList
source('~/.active-rstudio-document', echo=TRUE)
avec = 1:10
print(mycfint(avec))
source('~/.active-rstudio-document', echo=TRUE)
print(mycfint(avec))
myhtest=function(samp1, h0mean, htype)
{}
qnorm(-1.77946426)
qnorm(0.07516368)
qnorm(0.03758184)
rnorm(-1.779464)
source('~/.active-rstudio-document', echo=TRUE)
myhtest=function(samp1, h0mean, htype, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=3)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=qnorm(1-alpha)
error=z*psigma/sqrt(n)
za=error/(psigma/sqrt(n))
return(za)
}
pnorm(-1.779464)
myhtest=function(samp1, h0mean, htype, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=3)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
}
myhtest=function(samp1, h0mean, htype, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=3)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=rnorm(100)
ret1 = myhtest(data1, 0.3, "righttail")
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=3)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=rnorm(100)
ret1 = myhtest(data1, 0.3)
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=rnorm(100)
ret1 = myhtest(data1, 0.3)
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=as.numeric(rnorm(100))
ret1 = myhtest(data1, 0.3)
data1
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=as.numeric(rnorm(100))
ret1 = myhtest(data1, 0.3)
mycfint=function(samp1, alpha=0.05, psigma=0){
ans=vector(length=2)
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
n=length(samp1)
x=mean(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=qnorm(1-alpha/2)
error=z*psigma/sqrt(n)
ans[1]=x-error
ans[2]=x+error
return(ans)
}
avec = 1:10
> print(mycfint(avec))
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-x)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=as.numeric(rnorm(100))
ret1 = myhtest(data1, 0.3)
myhtest=function(samp1, h0mean, alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-u)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=as.numeric(rnorm(100))
ret1 = myhtest(data1, 0.3)
ret
ret1
qnorm(0.05)
myhtest=function(samp1, h0mean, htype,alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=2)
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-u)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=1-pnorm(z)
ans[1]=p
ans[2]=z
return(ans)
xc=
}
set.seed(102)
data1=as.numeric(rnorm(100))
ret1 = myhtest(data1, 0.3, "lefttail")
ret1
source('~/.active-rstudio-document', echo=TRUE)
ret1
qnorm(1-0.05/2)
pnorm(-1.959964)
myhtest=function(samp1, h0mean, htype,alpha=0.05, psigma=0){
if(psigma<0 || alpha<=0 || alpha>=1){
return(NULL)
}
ans=vector(length=3)
ans[3]=0
u=mean(samp1)
n=length(samp1)
if(psigma==0){
temp=0
for(i in 1: n){
temp=temp+(samp1[i]-u)^2
}
temp=temp/(n-1)
temp=sqrt(temp)
psigma=temp
}
z=(u-h0mean)/(psigma/sqrt(n))
p=pnorm(z)
if(htype=="righttail"){
p=1-pnorm(z)
xc=qnorm(1-alpha)
if(z>xc){
ans[3]=1
}
}
else if(htype=="twotail"){
p=2*p
xc=qnorm(1-alpha/2)
if(z<-1*xc || z>xc){
ans[3]=1
}
}
else{
xc=-1*qnorm(1-alpha)
if(z<cx){
ans[3]=1
}
}
ans[1]=p
ans[2]=z
return(ans)
}
set.seed(102)
data1=as.numeric(rnorm(100))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ret1
ret2
ret3
ret1
source('~/.active-rstudio-document', echo=TRUE)
ret1
myhtest(data1, 0.3, "twotail")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ret1
source('~/.active-rstudio-document', echo=TRUE)
ret1
ret2
ret3
abs(-1)
qnorm(1-0.05/2)
pnorm(1.959964)
qnorm(99.5)
qnorm(0.95)
pnorm(5)
1-pnorm(5)
1-pnorm(1)
1-pnorm(1.19)
2*(1-pnorm(2))
2*(1-pnorm(3))
9.17/(10/sqrt(18))
library(XML)
library(RCurl)
library(httr)
Sys.setlocale(category = "LC_ALL", locale = "cht")
#==========================================================
path="https://ndshen.github.io/test/movieList.html"
temp=getURL(path ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
movieTitle   <- xpathSApply(xmldoc, "//div//td//a", xmlValue)
movieTitle   <- gsub("\n", "", movieTitle)
movieTitle   <- gsub("\t", "", movieTitle)
movieUrl     <- xpathSApply(xmldoc, "//div//td//@href")
n=length(movieTitle)
subpath="http://www.truemovie.com/"
englishName=vector(length=n)
for(i in 1:n){
englishPath=paste0(subpath, movieUrl)
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
englishName[i ]   <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
englishName[i]   <- gsub("\n", "", movieTitle)
englishName[i]   <- gsub("\t", "", movieTitle)
}
englishName
englishPath=paste0(subpath, movieUrl[3])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
englishName[i ]   <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
englishName[i]   <- gsub("\n", "", movieTitle)
englishName[i]   <- gsub("\t", "", movieTitle)
englishName[3]
englishPath=paste0(subpath, movieUrl[3])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
englishName[3 ]   <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
englishName[3]   <- gsub("\n", "", movieTitle)
englishName[3]   <- gsub("\t", "", movieTitle)
englishName[3]
movieUrl[3]
englishPath=paste0(subpath, movieUrl[3])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
englishName[3 ]   <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
englishName[3]   <- gsub("\n", "", movieTitle)
englishName[3]   <- gsub("\t", "", movieTitle)englishPath=paste0(subpath, movieUrl[i])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
english  <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
english <- gsub("\n", "", english)
english <- gsub("\t", "", english)
englishName[i]=english
englishPath=paste0(subpath, movieUrl[3])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
english  <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
english <- gsub("\n", "", english)
english <- gsub("\t", "", english)
englishName[3]=english
englishName[3]
Sys.setlocale(category = "LC_ALL", locale = "cht")
Sys.setlocale(category = "LC_ALL", locale = "cht")
englishName[3]
englishPath=paste0(subpath, movieUrl[3])
temp=getURL(englishPath ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
english  <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
english <- gsub("\n", "", english)
english <- gsub("\t", "", english)
englishName[3]=english
englishName[3]
library(XML)
library(RCurl)
library(httr)
Sys.setlocale(category = "LC_ALL", locale = "cht")
path="http://www.truemovie.com/2016moviedata/FantasticBeastsandWheretoFindThem.htm"
temp=getURL(path ,encoding="utf-8")
xmldoc=htmlParse(temp, encoding="utf-8")
movieTitle   <- xpathSApply(xmldoc, "//td/p[3]", xmlValue)
movieTitle   <- gsub("\n", "", movieTitle)
movieTitle   <- gsub("\t", "", movieTitle)
View(movieList)
movieList
name(movieList)
View(movieList)
setwd("C:\\Users\\User\\Desktop\\大二上\\test\\project")
movieList=read.csv("movieList4.0.csv")
movieList[1]=NULL
rating=movieList[,3]
englishName=movieList[,2]
movieTitle=movieList[,1]
View(movieList)
movieList=data.frame(movieTitle, englishName, rating)
View(movieList)
View(movieList)
